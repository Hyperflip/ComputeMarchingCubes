#pragma kernel MeshConverter

#include "Common.hlsl"

StructuredBuffer<Triangle> Input;
ByteAddressBuffer Count;

RWByteAddressBuffer VertexBuffer;
RWByteAddressBuffer IndexBuffer;

// Write a vertex data to ByteAddressBuffer
void WriteVertex(uint vidx, float3 p, float3 n)
{
    uint addr_p = vidx * 6 * 4;
    uint addr_n = addr_p + 3 * 4;
    VertexBuffer.Store3(addr_p, asuint(p));
    VertexBuffer.Store3(addr_n, asuint(n));
}

[numthreads(64, 1, 1)]
void MeshConverter(uint id : SV_DispatchThreadID)
{
    uint count = Count.Load(0);
    uint vidx = id * 3;

    if (id < count)
    {
        Triangle i = Input[id];

        WriteVertex(vidx + 0, i.v1.p, i.v1.n);
        WriteVertex(vidx + 1, i.v2.p, i.v2.n);
        WriteVertex(vidx + 2, i.v3.p, i.v3.n);

        IndexBuffer.Store3(vidx * 4, uint3(vidx, vidx + 1, vidx + 2));
    }
    else
    {
        WriteVertex(vidx + 0, 0, 0);
        WriteVertex(vidx + 1, 0, 0);
        WriteVertex(vidx + 2, 0, 0);

        IndexBuffer.Store3(vidx * 4, 0);
    }
}
